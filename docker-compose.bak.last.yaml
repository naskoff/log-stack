networks:
  logsnet:
    driver: bridge

volumes:
  es_data: {}
  os_data: {}
  mongodb_data: {}
  graylog_data: {}
  filebeat_data: {}

services:
  # ----------------- ELK -----------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    container_name: elk-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - bootstrap.memory_lock=true
    ulimits:
      memlock: { soft: -1, hard: -1 }
    ports:
      - "9200:9200"
    networks: [logsnet]
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL","curl -s http://localhost:9200/_cluster/health | grep -E '\"status\":\"(yellow|green)\"'"]
      interval: 10s
      timeout: 5s
      retries: 60
      start_period: 60s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.14.0
    container_name: elk-logstash
    depends_on:
      elasticsearch: { condition: service_healthy }
    networks: [logsnet]
    ports:
      - "1514:1514/udp"   # приемаме и syslog директно (по избор)
      - "5044:5044"       # beats input от Filebeat
    environment:
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:9600/_node/pipelines"]
      interval: 10s
      timeout: 5s
      retries: 30

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    container_name: elk-kibana
    depends_on:
      elasticsearch: { condition: service_healthy }
    networks: [logsnet]
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:5601/api/status"]
      interval: 10s
      timeout: 5s
      retries: 30

  # ----------------- Graylog stack -----------------
  opensearch:
    image: opensearchproject/opensearch:2.12.0
    container_name: gl-opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock: { soft: -1, hard: -1 }
    networks: [logsnet]
    volumes:
      - os_data:/usr/share/opensearch/data
    ports:
      - "9201:9200"
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 10s
      timeout: 5s
      retries: 60

  mongodb:
    image: mongo:6
    container_name: gl-mongodb
    networks: [logsnet]
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD","mongosh","--eval","db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 30

  graylog:
    image: graylog/graylog:5.2
    container_name: graylog
    depends_on:
      opensearch: { condition: service_healthy }
      mongodb: { condition: service_healthy }
    networks: [logsnet]
    environment:
      GRAYLOG_PASSWORD_SECRET: "some-very-long-random-string-change-me"
      GRAYLOG_ROOT_PASSWORD_SHA2: "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918" # 'admin'
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9000/"
      GRAYLOG_ELASTICSEARCH_HOSTS: "http://opensearch:9200"
      GRAYLOG_MONGODB_URI: "mongodb://mongodb:27017/graylog"
      GRAYLOG_DISABLE_USER_PROFILE: "false"
    volumes:
      - graylog_data:/usr/share/graylog/data
    ports:
      - "9000:9000"        # Web UI
      - "1515:1514/udp"    # Ще създадеш Syslog UDP input в Graylog, слушащ на 1514 вътре → 1515 на хоста
      - "12201:12201/udp"  # (по избор) GELF UDP input
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:9000/api/system/lbstatus"]
      interval: 10s
      timeout: 3s
      retries: 60

  # ----------------- Filebeat → Logstash -----------------
  filebeat:
    build: ./filebeat
    container_name: filebeat
    user: root
    networks: [logsnet]
    depends_on:
      logstash: { condition: service_started }
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - filebeat_data:/usr/share/filebeat/data
#      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    command: ["-e"]  # логове към stdout
    # няма нужда от портове; filebeat е клиент
  loggen:
    image: alpine:3.20
    container_name: elk-loggen
    networks: [logsnet]
    command: >
      /bin/sh -c '
      i=0;
      while true; do
        i=$$((i+1));
        printf "%s INFO app=demo msg=Hello_%s user=%s\n" "$(date -Is)" "$$i" "$$(shuf -i 1000-1999 -n 1)";
        printf "{\"level\":\"info\",\"app\":\"demo\",\"msg\":\"json hello %s\",\"request_id\":\"%s\",\"price\":%s}\n" "$$i" "$$(cat /proc/sys/kernel/random/uuid)" "$$(shuf -i 1-999 -n 1)";
        sleep 1;
      done
      '
    # Send container logs via syslog driver to Logstash on host UDP/1514
  #    logging:
  #      driver: syslog
  #      options:
  #        syslog-address: "udp://127.0.0.1:1514"
  #        syslog-format: "rfc3164"
  #        tag: "loggen-demo"
  timewatch:
    image: alpine:3.20
    container_name: timewatch
    networks: [logsnet]
    command: ["/bin/sh","-c","apk add --no-cache curl >/dev/null && while true; do /usr/local/bin/ntp_drift_check.sh 2 https://time.cloudflare.com || true; sleep 30; done"]
    volumes:
      - ./ntp_drift_check.sh:/usr/local/bin/ntp_drift_check.sh:ro
    healthcheck:
      test: ["CMD-SHELL","/usr/local/bin/ntp_drift_check.sh 2 https://time.cloudflare.com >/dev/null"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s